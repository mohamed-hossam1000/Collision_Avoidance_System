
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001b0c  00001ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  00001ba8  2**0
                  ALLOC
  3 .stab         00001650  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ef9  00000000  00000000  000031f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000040f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004251  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007526  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000084a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000088ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e0       	ldi	r30, 0x0C	; 12
      78:	fb e1       	ldi	r31, 0x1B	; 27
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:

#define SAFE_DISTANCE	51
#define MCU2_READY		0x45

int main()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	67 97       	sbiw	r28, 0x17	; 23
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	uint16 distance;
	/* UART configuration and initialization */
	UART_configType uartConfig;
	uartConfig.baudRate 		= 9600;
     cb2:	80 e8       	ldi	r24, 0x80	; 128
     cb4:	95 e2       	ldi	r25, 0x25	; 37
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	89 8b       	std	Y+17, r24	; 0x11
     cbc:	9a 8b       	std	Y+18, r25	; 0x12
     cbe:	ab 8b       	std	Y+19, r26	; 0x13
     cc0:	bc 8b       	std	Y+20, r27	; 0x14
	uartConfig.character_size 	= EIGHT_BITS;
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	8d 8b       	std	Y+21, r24	; 0x15
	uartConfig.parity 			= DISABLED;
     cc6:	1e 8a       	std	Y+22, r1	; 0x16
	uartConfig.stop_bits 		= ONE_BIT;
     cc8:	1f 8a       	std	Y+23, r1	; 0x17
	UART_init(&uartConfig);
     cca:	ce 01       	movw	r24, r28
     ccc:	41 96       	adiw	r24, 0x11	; 17
     cce:	0e 94 07 0b 	call	0x160e	; 0x160e <UART_init>

	Ultrasonic_init();
     cd2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Ultrasonic_init>
	/* global interrupt enable */
	SREG |= (1<<7);
     cd6:	af e5       	ldi	r26, 0x5F	; 95
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	ef e5       	ldi	r30, 0x5F	; 95
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	80 68       	ori	r24, 0x80	; 128
     ce2:	8c 93       	st	X, r24
	/* wait until MCU_2 ready to start communication */
	while(UART_receiveByte() != MCU2_READY);
     ce4:	0e 94 85 0b 	call	0x170a	; 0x170a <UART_receiveByte>
     ce8:	85 34       	cpi	r24, 0x45	; 69
     cea:	e1 f7       	brne	.-8      	; 0xce4 <main+0x46>

	for(;;)
	{
		/* read sensor distance */
		distance = Ultrasonic_readDistance();
     cec:	0e 94 c8 0c 	call	0x1990	; 0x1990 <Ultrasonic_readDistance>
     cf0:	98 8b       	std	Y+16, r25	; 0x10
     cf2:	8f 87       	std	Y+15, r24	; 0x0f
		/* send state to MCU_2 */
		if(distance >= SAFE_DISTANCE)
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	98 89       	ldd	r25, Y+16	; 0x10
     cf8:	83 33       	cpi	r24, 0x33	; 51
     cfa:	91 05       	cpc	r25, r1
     cfc:	20 f0       	brcs	.+8      	; 0xd06 <main+0x68>
		{
			UART_sendByte(SAFE_DISTANCE);
     cfe:	83 e3       	ldi	r24, 0x33	; 51
     d00:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <UART_sendByte>
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <main+0x6e>
		}
		else
		{
			UART_sendByte((uint8)distance);
     d06:	8f 85       	ldd	r24, Y+15	; 0x0f
     d08:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <UART_sendByte>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a0 e7       	ldi	r26, 0x70	; 112
     d12:	b2 e4       	ldi	r27, 0x42	; 66
     d14:	8b 87       	std	Y+11, r24	; 0x0b
     d16:	9c 87       	std	Y+12, r25	; 0x0c
     d18:	ad 87       	std	Y+13, r26	; 0x0d
     d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d20:	8d 85       	ldd	r24, Y+13	; 0x0d
     d22:	9e 85       	ldd	r25, Y+14	; 0x0e
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	4a e7       	ldi	r20, 0x7A	; 122
     d2a:	55 e4       	ldi	r21, 0x45	; 69
     d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	8f 83       	std	Y+7, r24	; 0x07
     d36:	98 87       	std	Y+8, r25	; 0x08
     d38:	a9 87       	std	Y+9, r26	; 0x09
     d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d3c:	6f 81       	ldd	r22, Y+7	; 0x07
     d3e:	78 85       	ldd	r23, Y+8	; 0x08
     d40:	89 85       	ldd	r24, Y+9	; 0x09
     d42:	9a 85       	ldd	r25, Y+10	; 0x0a
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e8       	ldi	r20, 0x80	; 128
     d4a:	5f e3       	ldi	r21, 0x3F	; 63
     d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d50:	88 23       	and	r24, r24
     d52:	2c f4       	brge	.+10     	; 0xd5e <main+0xc0>
		__ticks = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	3f c0       	rjmp	.+126    	; 0xddc <main+0x13e>
	else if (__tmp > 65535)
     d5e:	6f 81       	ldd	r22, Y+7	; 0x07
     d60:	78 85       	ldd	r23, Y+8	; 0x08
     d62:	89 85       	ldd	r24, Y+9	; 0x09
     d64:	9a 85       	ldd	r25, Y+10	; 0x0a
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	4f e7       	ldi	r20, 0x7F	; 127
     d6c:	57 e4       	ldi	r21, 0x47	; 71
     d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d72:	18 16       	cp	r1, r24
     d74:	4c f5       	brge	.+82     	; 0xdc8 <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d76:	6b 85       	ldd	r22, Y+11	; 0x0b
     d78:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e2       	ldi	r20, 0x20	; 32
     d84:	51 e4       	ldi	r21, 0x41	; 65
     d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	bc 01       	movw	r22, r24
     d90:	cd 01       	movw	r24, r26
     d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	0f c0       	rjmp	.+30     	; 0xdbe <main+0x120>
     da0:	80 e9       	ldi	r24, 0x90	; 144
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	9c 83       	std	Y+4, r25	; 0x04
     da6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <main+0x10e>
     db0:	9c 83       	std	Y+4, r25	; 0x04
     db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	9e 83       	std	Y+6, r25	; 0x06
     dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	69 f7       	brne	.-38     	; 0xda0 <main+0x102>
     dc6:	92 cf       	rjmp	.-220    	; 0xcec <main+0x4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc8:	6f 81       	ldd	r22, Y+7	; 0x07
     dca:	78 85       	ldd	r23, Y+8	; 0x08
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9e 83       	std	Y+6, r25	; 0x06
     dda:	8d 83       	std	Y+5, r24	; 0x05
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <main+0x14a>
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	7d cf       	rjmp	.-262    	; 0xcec <main+0x4e>

00000df2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <GPIO_setupPinDirection+0x6>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <GPIO_setupPinDirection+0x8>
     dfa:	0f 92       	push	r0
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	6a 83       	std	Y+2, r22	; 0x02
     e04:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	88 30       	cpi	r24, 0x08	; 8
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <GPIO_setupPinDirection+0x1c>
     e0c:	d5 c0       	rjmp	.+426    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	84 30       	cpi	r24, 0x04	; 4
     e12:	08 f0       	brcs	.+2      	; 0xe16 <GPIO_setupPinDirection+0x24>
     e14:	d1 c0       	rjmp	.+418    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	3d 83       	std	Y+5, r19	; 0x05
     e1e:	2c 83       	std	Y+4, r18	; 0x04
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	91 05       	cpc	r25, r1
     e28:	09 f4       	brne	.+2      	; 0xe2c <GPIO_setupPinDirection+0x3a>
     e2a:	43 c0       	rjmp	.+134    	; 0xeb2 <GPIO_setupPinDirection+0xc0>
     e2c:	2c 81       	ldd	r18, Y+4	; 0x04
     e2e:	3d 81       	ldd	r19, Y+5	; 0x05
     e30:	22 30       	cpi	r18, 0x02	; 2
     e32:	31 05       	cpc	r19, r1
     e34:	2c f4       	brge	.+10     	; 0xe40 <GPIO_setupPinDirection+0x4e>
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	9d 81       	ldd	r25, Y+5	; 0x05
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	71 f0       	breq	.+28     	; 0xe5a <GPIO_setupPinDirection+0x68>
     e3e:	bc c0       	rjmp	.+376    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
     e40:	2c 81       	ldd	r18, Y+4	; 0x04
     e42:	3d 81       	ldd	r19, Y+5	; 0x05
     e44:	22 30       	cpi	r18, 0x02	; 2
     e46:	31 05       	cpc	r19, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <GPIO_setupPinDirection+0x5a>
     e4a:	5f c0       	rjmp	.+190    	; 0xf0a <GPIO_setupPinDirection+0x118>
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	91 05       	cpc	r25, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <GPIO_setupPinDirection+0x66>
     e56:	85 c0       	rjmp	.+266    	; 0xf62 <GPIO_setupPinDirection+0x170>
     e58:	af c0       	rjmp	.+350    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	a1 f4       	brne	.+40     	; 0xe88 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e60:	aa e3       	ldi	r26, 0x3A	; 58
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ea e3       	ldi	r30, 0x3A	; 58
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <GPIO_setupPinDirection+0x8c>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <GPIO_setupPinDirection+0x88>
     e82:	84 2b       	or	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	98 c0       	rjmp	.+304    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e88:	aa e3       	ldi	r26, 0x3A	; 58
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ea e3       	ldi	r30, 0x3A	; 58
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <GPIO_setupPinDirection+0xb4>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <GPIO_setupPinDirection+0xb0>
     eaa:	80 95       	com	r24
     eac:	84 23       	and	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	83 c0       	rjmp	.+262    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	a1 f4       	brne	.+40     	; 0xee0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     eb8:	a7 e3       	ldi	r26, 0x37	; 55
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e7 e3       	ldi	r30, 0x37	; 55
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <GPIO_setupPinDirection+0xe4>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <GPIO_setupPinDirection+0xe0>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	6c c0       	rjmp	.+216    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ee0:	a7 e3       	ldi	r26, 0x37	; 55
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e7 e3       	ldi	r30, 0x37	; 55
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <GPIO_setupPinDirection+0x10c>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <GPIO_setupPinDirection+0x108>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	57 c0       	rjmp	.+174    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a1 f4       	brne	.+40     	; 0xf38 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f10:	a4 e3       	ldi	r26, 0x34	; 52
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e4 e3       	ldi	r30, 0x34	; 52
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <GPIO_setupPinDirection+0x13c>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <GPIO_setupPinDirection+0x138>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	40 c0       	rjmp	.+128    	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f38:	a4 e3       	ldi	r26, 0x34	; 52
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e4 e3       	ldi	r30, 0x34	; 52
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <GPIO_setupPinDirection+0x164>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <GPIO_setupPinDirection+0x160>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	2b c0       	rjmp	.+86     	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	a1 f4       	brne	.+40     	; 0xf90 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f68:	a1 e3       	ldi	r26, 0x31	; 49
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e1 e3       	ldi	r30, 0x31	; 49
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <GPIO_setupPinDirection+0x194>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <GPIO_setupPinDirection+0x190>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	14 c0       	rjmp	.+40     	; 0xfb8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f90:	a1 e3       	ldi	r26, 0x31	; 49
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e1 e3       	ldi	r30, 0x31	; 49
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <GPIO_setupPinDirection+0x1bc>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <GPIO_setupPinDirection+0x1b8>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <GPIO_writePin+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <GPIO_writePin+0x8>
     fd0:	0f 92       	push	r0
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	6a 83       	std	Y+2, r22	; 0x02
     fda:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	88 30       	cpi	r24, 0x08	; 8
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <GPIO_writePin+0x1c>
     fe2:	d5 c0       	rjmp	.+426    	; 0x118e <GPIO_writePin+0x1c6>
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	84 30       	cpi	r24, 0x04	; 4
     fe8:	08 f0       	brcs	.+2      	; 0xfec <GPIO_writePin+0x24>
     fea:	d1 c0       	rjmp	.+418    	; 0x118e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3d 83       	std	Y+5, r19	; 0x05
     ff4:	2c 83       	std	Y+4, r18	; 0x04
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <GPIO_writePin+0x3a>
    1000:	43 c0       	rjmp	.+134    	; 0x1088 <GPIO_writePin+0xc0>
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	22 30       	cpi	r18, 0x02	; 2
    1008:	31 05       	cpc	r19, r1
    100a:	2c f4       	brge	.+10     	; 0x1016 <GPIO_writePin+0x4e>
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	71 f0       	breq	.+28     	; 0x1030 <GPIO_writePin+0x68>
    1014:	bc c0       	rjmp	.+376    	; 0x118e <GPIO_writePin+0x1c6>
    1016:	2c 81       	ldd	r18, Y+4	; 0x04
    1018:	3d 81       	ldd	r19, Y+5	; 0x05
    101a:	22 30       	cpi	r18, 0x02	; 2
    101c:	31 05       	cpc	r19, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <GPIO_writePin+0x5a>
    1020:	5f c0       	rjmp	.+190    	; 0x10e0 <GPIO_writePin+0x118>
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <GPIO_writePin+0x66>
    102c:	85 c0       	rjmp	.+266    	; 0x1138 <GPIO_writePin+0x170>
    102e:	af c0       	rjmp	.+350    	; 0x118e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	a1 f4       	brne	.+40     	; 0x105e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1036:	ab e3       	ldi	r26, 0x3B	; 59
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	eb e3       	ldi	r30, 0x3B	; 59
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <GPIO_writePin+0x8c>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <GPIO_writePin+0x88>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	98 c0       	rjmp	.+304    	; 0x118e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    105e:	ab e3       	ldi	r26, 0x3B	; 59
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	eb e3       	ldi	r30, 0x3B	; 59
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <GPIO_writePin+0xb4>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <GPIO_writePin+0xb0>
    1080:	80 95       	com	r24
    1082:	84 23       	and	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	83 c0       	rjmp	.+262    	; 0x118e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	a1 f4       	brne	.+40     	; 0x10b6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    108e:	a8 e3       	ldi	r26, 0x38	; 56
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e8 e3       	ldi	r30, 0x38	; 56
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <GPIO_writePin+0xe4>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <GPIO_writePin+0xe0>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	6c c0       	rjmp	.+216    	; 0x118e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10b6:	a8 e3       	ldi	r26, 0x38	; 56
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e3       	ldi	r30, 0x38	; 56
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <GPIO_writePin+0x10c>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <GPIO_writePin+0x108>
    10d8:	80 95       	com	r24
    10da:	84 23       	and	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	57 c0       	rjmp	.+174    	; 0x118e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	a1 f4       	brne	.+40     	; 0x110e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10e6:	a5 e3       	ldi	r26, 0x35	; 53
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e3       	ldi	r30, 0x35	; 53
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <GPIO_writePin+0x13c>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <GPIO_writePin+0x138>
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	40 c0       	rjmp	.+128    	; 0x118e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    110e:	a5 e3       	ldi	r26, 0x35	; 53
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e3       	ldi	r30, 0x35	; 53
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <GPIO_writePin+0x164>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <GPIO_writePin+0x160>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	2b c0       	rjmp	.+86     	; 0x118e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	a1 f4       	brne	.+40     	; 0x1166 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    113e:	a2 e3       	ldi	r26, 0x32	; 50
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e2 e3       	ldi	r30, 0x32	; 50
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <GPIO_writePin+0x194>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <GPIO_writePin+0x190>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	14 c0       	rjmp	.+40     	; 0x118e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1166:	a2 e3       	ldi	r26, 0x32	; 50
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e2 e3       	ldi	r30, 0x32	; 50
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_writePin+0x1bc>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_writePin+0x1b8>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <GPIO_readPin+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <GPIO_readPin+0x8>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    11ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11b0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 30       	cpi	r24, 0x08	; 8
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <GPIO_readPin+0x1c>
    11b8:	84 c0       	rjmp	.+264    	; 0x12c2 <GPIO_readPin+0x124>
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <GPIO_readPin+0x24>
    11c0:	80 c0       	rjmp	.+256    	; 0x12c2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3d 83       	std	Y+5, r19	; 0x05
    11ca:	2c 83       	std	Y+4, r18	; 0x04
    11cc:	4c 81       	ldd	r20, Y+4	; 0x04
    11ce:	5d 81       	ldd	r21, Y+5	; 0x05
    11d0:	41 30       	cpi	r20, 0x01	; 1
    11d2:	51 05       	cpc	r21, r1
    11d4:	79 f1       	breq	.+94     	; 0x1234 <GPIO_readPin+0x96>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	91 05       	cpc	r25, r1
    11de:	34 f4       	brge	.+12     	; 0x11ec <GPIO_readPin+0x4e>
    11e0:	2c 81       	ldd	r18, Y+4	; 0x04
    11e2:	3d 81       	ldd	r19, Y+5	; 0x05
    11e4:	21 15       	cp	r18, r1
    11e6:	31 05       	cpc	r19, r1
    11e8:	69 f0       	breq	.+26     	; 0x1204 <GPIO_readPin+0x66>
    11ea:	6b c0       	rjmp	.+214    	; 0x12c2 <GPIO_readPin+0x124>
    11ec:	4c 81       	ldd	r20, Y+4	; 0x04
    11ee:	5d 81       	ldd	r21, Y+5	; 0x05
    11f0:	42 30       	cpi	r20, 0x02	; 2
    11f2:	51 05       	cpc	r21, r1
    11f4:	b9 f1       	breq	.+110    	; 0x1264 <GPIO_readPin+0xc6>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <GPIO_readPin+0x64>
    1200:	49 c0       	rjmp	.+146    	; 0x1294 <GPIO_readPin+0xf6>
    1202:	5f c0       	rjmp	.+190    	; 0x12c2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1204:	e9 e3       	ldi	r30, 0x39	; 57
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_readPin+0x7e>
    1218:	55 95       	asr	r21
    121a:	47 95       	ror	r20
    121c:	8a 95       	dec	r24
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_readPin+0x7a>
    1220:	ca 01       	movw	r24, r20
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	88 23       	and	r24, r24
    1228:	19 f0       	breq	.+6      	; 0x1230 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	49 c0       	rjmp	.+146    	; 0x12c2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1230:	19 82       	std	Y+1, r1	; 0x01
    1232:	47 c0       	rjmp	.+142    	; 0x12c2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1234:	e6 e3       	ldi	r30, 0x36	; 54
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a9 01       	movw	r20, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GPIO_readPin+0xae>
    1248:	55 95       	asr	r21
    124a:	47 95       	ror	r20
    124c:	8a 95       	dec	r24
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <GPIO_readPin+0xaa>
    1250:	ca 01       	movw	r24, r20
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	90 70       	andi	r25, 0x00	; 0
    1256:	88 23       	and	r24, r24
    1258:	19 f0       	breq	.+6      	; 0x1260 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	31 c0       	rjmp	.+98     	; 0x12c2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1260:	19 82       	std	Y+1, r1	; 0x01
    1262:	2f c0       	rjmp	.+94     	; 0x12c2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1264:	e3 e3       	ldi	r30, 0x33	; 51
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_readPin+0xde>
    1278:	55 95       	asr	r21
    127a:	47 95       	ror	r20
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_readPin+0xda>
    1280:	ca 01       	movw	r24, r20
    1282:	81 70       	andi	r24, 0x01	; 1
    1284:	90 70       	andi	r25, 0x00	; 0
    1286:	88 23       	and	r24, r24
    1288:	19 f0       	breq	.+6      	; 0x1290 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	19 c0       	rjmp	.+50     	; 0x12c2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1290:	19 82       	std	Y+1, r1	; 0x01
    1292:	17 c0       	rjmp	.+46     	; 0x12c2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1294:	e0 e3       	ldi	r30, 0x30	; 48
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a9 01       	movw	r20, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <GPIO_readPin+0x10e>
    12a8:	55 95       	asr	r21
    12aa:	47 95       	ror	r20
    12ac:	8a 95       	dec	r24
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <GPIO_readPin+0x10a>
    12b0:	ca 01       	movw	r24, r20
    12b2:	81 70       	andi	r24, 0x01	; 1
    12b4:	90 70       	andi	r25, 0x00	; 0
    12b6:	88 23       	and	r24, r24
    12b8:	19 f0       	breq	.+6      	; 0x12c0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12c0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <GPIO_setupPortDirection+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <GPIO_setupPortDirection+0x8>
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	84 30       	cpi	r24, 0x04	; 4
    12e8:	90 f5       	brcc	.+100    	; 0x134e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3c 83       	std	Y+4, r19	; 0x04
    12f2:	2b 83       	std	Y+3, r18	; 0x03
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	d1 f0       	breq	.+52     	; 0x1332 <GPIO_setupPortDirection+0x5e>
    12fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1300:	3c 81       	ldd	r19, Y+4	; 0x04
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	2c f4       	brge	.+10     	; 0x1312 <GPIO_setupPortDirection+0x3e>
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	61 f0       	breq	.+24     	; 0x1328 <GPIO_setupPortDirection+0x54>
    1310:	1e c0       	rjmp	.+60     	; 0x134e <GPIO_setupPortDirection+0x7a>
    1312:	2b 81       	ldd	r18, Y+3	; 0x03
    1314:	3c 81       	ldd	r19, Y+4	; 0x04
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	81 f0       	breq	.+32     	; 0x133c <GPIO_setupPortDirection+0x68>
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	81 f0       	breq	.+32     	; 0x1346 <GPIO_setupPortDirection+0x72>
    1326:	13 c0       	rjmp	.+38     	; 0x134e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1328:	ea e3       	ldi	r30, 0x3A	; 58
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
    1330:	0e c0       	rjmp	.+28     	; 0x134e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1332:	e7 e3       	ldi	r30, 0x37	; 55
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
    133a:	09 c0       	rjmp	.+18     	; 0x134e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    133c:	e4 e3       	ldi	r30, 0x34	; 52
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	80 83       	st	Z, r24
    1344:	04 c0       	rjmp	.+8      	; 0x134e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1346:	e1 e3       	ldi	r30, 0x31	; 49
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
			break;
		}
	}
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <GPIO_writePort+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <GPIO_writePort+0x8>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	90 f5       	brcc	.+100    	; 0x13d6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3c 83       	std	Y+4, r19	; 0x04
    137a:	2b 83       	std	Y+3, r18	; 0x03
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	d1 f0       	breq	.+52     	; 0x13ba <GPIO_writePort+0x5e>
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <GPIO_writePort+0x3e>
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	61 f0       	breq	.+24     	; 0x13b0 <GPIO_writePort+0x54>
    1398:	1e c0       	rjmp	.+60     	; 0x13d6 <GPIO_writePort+0x7a>
    139a:	2b 81       	ldd	r18, Y+3	; 0x03
    139c:	3c 81       	ldd	r19, Y+4	; 0x04
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <GPIO_writePort+0x68>
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <GPIO_writePort+0x72>
    13ae:	13 c0       	rjmp	.+38     	; 0x13d6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13b0:	eb e3       	ldi	r30, 0x3B	; 59
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	0e c0       	rjmp	.+28     	; 0x13d6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13ba:	e8 e3       	ldi	r30, 0x38	; 56
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13c4:	e5 e3       	ldi	r30, 0x35	; 53
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13ce:	e2 e3       	ldi	r30, 0x32	; 50
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
			break;
		}
	}
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <GPIO_readPort+0x6>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <GPIO_readPort+0x8>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13f2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	90 f5       	brcc	.+100    	; 0x145e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3c 83       	std	Y+4, r19	; 0x04
    1402:	2b 83       	std	Y+3, r18	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	d1 f0       	breq	.+52     	; 0x1442 <GPIO_readPort+0x5e>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	2c f4       	brge	.+10     	; 0x1422 <GPIO_readPort+0x3e>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	61 f0       	breq	.+24     	; 0x1438 <GPIO_readPort+0x54>
    1420:	1e c0       	rjmp	.+60     	; 0x145e <GPIO_readPort+0x7a>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	81 f0       	breq	.+32     	; 0x144c <GPIO_readPort+0x68>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	83 30       	cpi	r24, 0x03	; 3
    1432:	91 05       	cpc	r25, r1
    1434:	81 f0       	breq	.+32     	; 0x1456 <GPIO_readPort+0x72>
    1436:	13 c0       	rjmp	.+38     	; 0x145e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1438:	e9 e3       	ldi	r30, 0x39	; 57
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	0e c0       	rjmp	.+28     	; 0x145e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1442:	e6 e3       	ldi	r30, 0x36	; 54
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	09 c0       	rjmp	.+18     	; 0x145e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    144c:	e3 e3       	ldi	r30, 0x33	; 51
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	04 c0       	rjmp	.+8      	; 0x145e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1456:	e0 e3       	ldi	r30, 0x30	; 48
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <__vector_6>:
/**
 * Description :
 * Interrupt Service Routine for the ICU interrupt
 */
ISR(TIMER1_CAPT_vect)
{
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack!=NULL_PTR)
    1498:	80 91 68 00 	lds	r24, 0x0068
    149c:	90 91 69 00 	lds	r25, 0x0069
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	29 f0       	breq	.+10     	; 0x14ae <__vector_6+0x40>
	{
		/* call the call back function */
		(*g_callBack)();
    14a4:	e0 91 68 00 	lds	r30, 0x0068
    14a8:	f0 91 69 00 	lds	r31, 0x0069
    14ac:	09 95       	icall
	}
}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	bf 91       	pop	r27
    14b8:	af 91       	pop	r26
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	7f 91       	pop	r23
    14c0:	6f 91       	pop	r22
    14c2:	5f 91       	pop	r21
    14c4:	4f 91       	pop	r20
    14c6:	3f 91       	pop	r19
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <ICU_init>:
/*
 * Description :
 * initialize the ICU with the required frequency and edge detection
 */
void ICU_init(const ICU_configType* config)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <ICU_init+0x6>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
	/* configure ICP1 as input pin */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	66 e0       	ldi	r22, 0x06	; 6
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <GPIO_setupPinDirection>
	/* bits required for non-PWM modes  */
	TCCR1A=(1<<FOC1A) | (1<<FOC1A);
    14ec:	ef e4       	ldi	r30, 0x4F	; 79
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	88 e0       	ldi	r24, 0x08	; 8
    14f2:	80 83       	st	Z, r24
	/* set the clock prescaler and choose edge detection type */
	TCCR1B=config->clk | (config->edge << ICES1);
    14f4:	ae e4       	ldi	r26, 0x4E	; 78
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e9 81       	ldd	r30, Y+1	; 0x01
    14fa:	fa 81       	ldd	r31, Y+2	; 0x02
    14fc:	81 81       	ldd	r24, Z+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	e9 81       	ldd	r30, Y+1	; 0x01
    1502:	fa 81       	ldd	r31, Y+2	; 0x02
    1504:	80 81       	ld	r24, Z
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	00 24       	eor	r0, r0
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
    1510:	07 94       	ror	r0
    1512:	96 95       	lsr	r25
    1514:	87 95       	ror	r24
    1516:	07 94       	ror	r0
    1518:	98 2f       	mov	r25, r24
    151a:	80 2d       	mov	r24, r0
    151c:	82 2b       	or	r24, r18
    151e:	8c 93       	st	X, r24
	/* enable the ICU interrupts */
	TIMSK|=(1<<TICIE1);
    1520:	a9 e5       	ldi	r26, 0x59	; 89
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e9 e5       	ldi	r30, 0x59	; 89
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 62       	ori	r24, 0x20	; 32
    152c:	8c 93       	st	X, r24
	/* initialize the registers */
	TCNT1=0;
    152e:	ec e4       	ldi	r30, 0x4C	; 76
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	11 82       	std	Z+1, r1	; 0x01
    1534:	10 82       	st	Z, r1
	ICR1=0;
    1536:	e6 e4       	ldi	r30, 0x46	; 70
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	11 82       	std	Z+1, r1	; 0x01
    153c:	10 82       	st	Z, r1
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <ICU_selectEdgeDetectionType>:
/*
 * Description :
 * change the type of edge the ICU detects
 */
void ICU_selectEdgeDetectionType(ICU_edgeType edge)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	0f 92       	push	r0
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B=(TCCR1B&0xBF) | (edge<<6);
    1554:	ae e4       	ldi	r26, 0x4E	; 78
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ee e4       	ldi	r30, 0x4E	; 78
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	28 2f       	mov	r18, r24
    1560:	2f 7b       	andi	r18, 0xBF	; 191
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	00 24       	eor	r0, r0
    156a:	96 95       	lsr	r25
    156c:	87 95       	ror	r24
    156e:	07 94       	ror	r0
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	07 94       	ror	r0
    1576:	98 2f       	mov	r25, r24
    1578:	80 2d       	mov	r24, r0
    157a:	82 2b       	or	r24, r18
    157c:	8c 93       	st	X, r24
}
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <ICU_setCallBack>:
/*
 * Description :
 * set call back address
 */
void ICU_setCallBack(void (*func_ptr)(void))
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <ICU_setCallBack+0x6>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01
	g_callBack=func_ptr;
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	90 93 69 00 	sts	0x0069, r25
    159c:	80 93 68 00 	sts	0x0068, r24
}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <ICU_cleaTimerValue>:
/*
 * Description :
 * Function to clear timer value
 */
void ICU_cleaTimerValue()
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    15b2:	ec e4       	ldi	r30, 0x4C	; 76
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	11 82       	std	Z+1, r1	; 0x01
    15b8:	10 82       	st	Z, r1
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <ICU_getCapturedValue>:
/*
 * Description :
 * get the TIMER1 value when the input is captured
 */
uint16 ICU_getCapturedValue(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    15c8:	e6 e4       	ldi	r30, 0x46	; 70
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <ICU_deinit>:
/*
 * Description :
 * function to disable Timer1 and the ICU
 */
void ICU_deinit()
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	/* clear the registers */
	TCCR1A=0;
    15de:	ef e4       	ldi	r30, 0x4F	; 79
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	10 82       	st	Z, r1
	TCCR1B=0;
    15e4:	ee e4       	ldi	r30, 0x4E	; 78
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	10 82       	st	Z, r1
	TCNT1=0;
    15ea:	ec e4       	ldi	r30, 0x4C	; 76
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	11 82       	std	Z+1, r1	; 0x01
    15f0:	10 82       	st	Z, r1
	ICR1=0;
    15f2:	e6 e4       	ldi	r30, 0x46	; 70
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	11 82       	std	Z+1, r1	; 0x01
    15f8:	10 82       	st	Z, r1
	/* disable the ICU interrupts */
	TIMSK&=~(1<<TICIE1);
    15fa:	a9 e5       	ldi	r26, 0x59	; 89
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e9 e5       	ldi	r30, 0x59	; 89
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 7d       	andi	r24, 0xDF	; 223
    1606:	8c 93       	st	X, r24
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <UART_init>:
/*
 * Description :
 * initialize the UART with the required baud rate and frame
 */
void UART_init(const UART_configType* config)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <UART_init+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <UART_init+0x8>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	9c 83       	std	Y+4, r25	; 0x04
    161c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 baud_value;
	/* double transmission speed */
	UCSRA=(1<<U2X);
    161e:	eb e2       	ldi	r30, 0x2B	; 43
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	80 83       	st	Z, r24
	/* enable data transmission and receiving and disabling interrupts */
	UCSRB=(1<<TXEN)|(1<<RXEN);
    1626:	ea e2       	ldi	r30, 0x2A	; 42
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	88 e1       	ldi	r24, 0x18	; 24
    162c:	80 83       	st	Z, r24
	/* URSEL must be 1 to write in register
	 * selecting frame characteristics
	 */
	UCSRC=(1<<URSEL)|(config->parity<<4)|(config->stop_bits<<3)|(config->character_size<<1);
    162e:	a0 e4       	ldi	r26, 0x40	; 64
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	eb 81       	ldd	r30, Y+3	; 0x03
    1634:	fc 81       	ldd	r31, Y+4	; 0x04
    1636:	85 81       	ldd	r24, Z+5	; 0x05
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	82 95       	swap	r24
    163e:	92 95       	swap	r25
    1640:	90 7f       	andi	r25, 0xF0	; 240
    1642:	98 27       	eor	r25, r24
    1644:	80 7f       	andi	r24, 0xF0	; 240
    1646:	98 27       	eor	r25, r24
    1648:	28 2f       	mov	r18, r24
    164a:	20 68       	ori	r18, 0x80	; 128
    164c:	eb 81       	ldd	r30, Y+3	; 0x03
    164e:	fc 81       	ldd	r31, Y+4	; 0x04
    1650:	86 81       	ldd	r24, Z+6	; 0x06
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	28 2b       	or	r18, r24
    1664:	eb 81       	ldd	r30, Y+3	; 0x03
    1666:	fc 81       	ldd	r31, Y+4	; 0x04
    1668:	84 81       	ldd	r24, Z+4	; 0x04
    166a:	88 2f       	mov	r24, r24
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	82 2b       	or	r24, r18
    1674:	8c 93       	st	X, r24
	/* calculating the value to achieve the required baud rate */
	baud_value=(uint16)((F_CPU / (config->baudRate * 8)) - 1);
    1676:	eb 81       	ldd	r30, Y+3	; 0x03
    1678:	fc 81       	ldd	r31, Y+4	; 0x04
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	a2 81       	ldd	r26, Z+2	; 0x02
    1680:	b3 81       	ldd	r27, Z+3	; 0x03
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	aa 1f       	adc	r26, r26
    1688:	bb 1f       	adc	r27, r27
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	aa 1f       	adc	r26, r26
    1690:	bb 1f       	adc	r27, r27
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	aa 1f       	adc	r26, r26
    1698:	bb 1f       	adc	r27, r27
    169a:	9c 01       	movw	r18, r24
    169c:	ad 01       	movw	r20, r26
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	94 e2       	ldi	r25, 0x24	; 36
    16a2:	a4 ef       	ldi	r26, 0xF4	; 244
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__udivmodsi4>
    16ae:	da 01       	movw	r26, r20
    16b0:	c9 01       	movw	r24, r18
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=baud_value;
    16b8:	e9 e2       	ldi	r30, 0x29	; 41
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	80 83       	st	Z, r24
	UBRRH=(baud_value>>8);
    16c0:	e0 e4       	ldi	r30, 0x40	; 64
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	89 2f       	mov	r24, r25
    16ca:	99 27       	eor	r25, r25
    16cc:	80 83       	st	Z, r24
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <UART_sendByte>:
/*
 * Description :
 * Function to send a byte
 */
void UART_sendByte(uint8 data)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	0f 92       	push	r0
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
	/* wait until transmission register is empty */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    16e8:	eb e2       	ldi	r30, 0x2B	; 43
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	80 72       	andi	r24, 0x20	; 32
    16f4:	90 70       	andi	r25, 0x00	; 0
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	b9 f3       	breq	.-18     	; 0x16e8 <UART_sendByte+0xc>
	/* send the data */
	UDR=data;
    16fa:	ec e2       	ldi	r30, 0x2C	; 44
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	80 83       	st	Z, r24
}
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <UART_receiveByte>:
/*
 * Description :
 * Function to read a received byte
 */
uint8 UART_receiveByte(void)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
	/* wait until the entire bit is received */
	while(BIT_IS_CLEAR(UCSRA, RXC));
    1712:	eb e2       	ldi	r30, 0x2B	; 43
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	88 23       	and	r24, r24
    171a:	dc f7       	brge	.-10     	; 0x1712 <UART_receiveByte+0x8>
	/* read the data */
	return UDR;
    171c:	ec e2       	ldi	r30, 0x2C	; 44
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <UART_sendString>:
/*
 * Description :
 * Function to send a String
 */
void UART_sendString(sint8* str)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <UART_sendString+0x6>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	0a c0       	rjmp	.+20     	; 0x174c <UART_sendString+0x24>
	for(; *str!='\0'; str++)
	{
		UART_sendByte(*str);
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	80 81       	ld	r24, Z
    173e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <UART_sendByte>
 * Description :
 * Function to send a String
 */
void UART_sendString(sint8* str)
{
	for(; *str!='\0'; str++)
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	e9 81       	ldd	r30, Y+1	; 0x01
    174e:	fa 81       	ldd	r31, Y+2	; 0x02
    1750:	80 81       	ld	r24, Z
    1752:	88 23       	and	r24, r24
    1754:	89 f7       	brne	.-30     	; 0x1738 <UART_sendString+0x10>
	{
		UART_sendByte(*str);
	}
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <UART_receiveString>:
/*
 * Description :
 * Function to read a received String
 */
void UART_receiveString(sint8* str)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <UART_receiveString+0x6>
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01

	/* receive data until the stop byte agreed upon*/
	do
	{
		*str=UART_receiveByte();
    176e:	0e 94 85 0b 	call	0x170a	; 0x170a <UART_receiveByte>
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	80 83       	st	Z, r24
		str++;
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
	}while(*(str-1)!='#');
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	fc 01       	movw	r30, r24
    1788:	31 97       	sbiw	r30, 0x01	; 1
    178a:	80 81       	ld	r24, Z
    178c:	83 32       	cpi	r24, 0x23	; 35
    178e:	79 f7       	brne	.-34     	; 0x176e <UART_receiveString+0xe>
	/* replace the stop byte with null */
	*(str-1)='\0';
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	fc 01       	movw	r30, r24
    1796:	31 97       	sbiw	r30, 0x01	; 1
    1798:	10 82       	st	Z, r1
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <Ultrasonic_init>:
 * Initialize the ICU driver as required
 * Setup the ICU call back function
 * Setup the direction for the trigger pin as output pin
 */
void Ultrasonic_init(void)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <Ultrasonic_init+0x6>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	/* initialize the ICU with frequency F_CPU/8
	 * and set up detection type to rising edge */
	ICU_configType config;
	config.clk=F_CPU_8;
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	8a 83       	std	Y+2, r24	; 0x02
	config.edge=RISING_EDGE;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
	ICU_init(&config);
    17b6:	ce 01       	movw	r24, r28
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <ICU_init>
	/* set call back function for ICU */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    17be:	80 ef       	ldi	r24, 0xF0	; 240
    17c0:	9c e0       	ldi	r25, 0x0C	; 12
    17c2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ICU_setCallBack>
	/* set trigger pin as output pin */
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, PIN_OUTPUT);
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	65 e0       	ldi	r22, 0x05	; 5
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <GPIO_setupPinDirection>
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <Ultrasonic_Trigger>:
/*
 * Description :
 * send the trigger pulse to the ultrasonic
 */
static void Ultrasonic_Trigger(void)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	68 97       	sbiw	r28, 0x18	; 24
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
	/* set the trigger pin to high for 10 us to send the trigger pulse */
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_HIGH);
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	65 e0       	ldi	r22, 0x05	; 5
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <GPIO_writePin>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e2       	ldi	r26, 0x20	; 32
    17fe:	b1 e4       	ldi	r27, 0x41	; 65
    1800:	8d 8b       	std	Y+21, r24	; 0x15
    1802:	9e 8b       	std	Y+22, r25	; 0x16
    1804:	af 8b       	std	Y+23, r26	; 0x17
    1806:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1808:	6d 89       	ldd	r22, Y+21	; 0x15
    180a:	7e 89       	ldd	r23, Y+22	; 0x16
    180c:	8f 89       	ldd	r24, Y+23	; 0x17
    180e:	98 8d       	ldd	r25, Y+24	; 0x18
    1810:	2b ea       	ldi	r18, 0xAB	; 171
    1812:	3a ea       	ldi	r19, 0xAA	; 170
    1814:	4a ea       	ldi	r20, 0xAA	; 170
    1816:	50 e4       	ldi	r21, 0x40	; 64
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	89 8b       	std	Y+17, r24	; 0x11
    1822:	9a 8b       	std	Y+18, r25	; 0x12
    1824:	ab 8b       	std	Y+19, r26	; 0x13
    1826:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1828:	69 89       	ldd	r22, Y+17	; 0x11
    182a:	7a 89       	ldd	r23, Y+18	; 0x12
    182c:	8b 89       	ldd	r24, Y+19	; 0x13
    182e:	9c 89       	ldd	r25, Y+20	; 0x14
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	1c f4       	brge	.+6      	; 0x1846 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	88 8b       	std	Y+16, r24	; 0x10
    1844:	91 c0       	rjmp	.+290    	; 0x1968 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1846:	69 89       	ldd	r22, Y+17	; 0x11
    1848:	7a 89       	ldd	r23, Y+18	; 0x12
    184a:	8b 89       	ldd	r24, Y+19	; 0x13
    184c:	9c 89       	ldd	r25, Y+20	; 0x14
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	53 e4       	ldi	r21, 0x43	; 67
    1856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185a:	18 16       	cp	r1, r24
    185c:	0c f0       	brlt	.+2      	; 0x1860 <Ultrasonic_Trigger+0x86>
    185e:	7b c0       	rjmp	.+246    	; 0x1956 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1860:	6d 89       	ldd	r22, Y+21	; 0x15
    1862:	7e 89       	ldd	r23, Y+22	; 0x16
    1864:	8f 89       	ldd	r24, Y+23	; 0x17
    1866:	98 8d       	ldd	r25, Y+24	; 0x18
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a e7       	ldi	r20, 0x7A	; 122
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8c 87       	std	Y+12, r24	; 0x0c
    187a:	9d 87       	std	Y+13, r25	; 0x0d
    187c:	ae 87       	std	Y+14, r26	; 0x0e
    187e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	6c 85       	ldd	r22, Y+12	; 0x0c
    1882:	7d 85       	ldd	r23, Y+13	; 0x0d
    1884:	8e 85       	ldd	r24, Y+14	; 0x0e
    1886:	9f 85       	ldd	r25, Y+15	; 0x0f
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a e7       	ldi	r20, 0x7A	; 122
    188e:	55 e4       	ldi	r21, 0x45	; 69
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	88 87       	std	Y+8, r24	; 0x08
    189a:	99 87       	std	Y+9, r25	; 0x09
    189c:	aa 87       	std	Y+10, r26	; 0x0a
    189e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18a0:	68 85       	ldd	r22, Y+8	; 0x08
    18a2:	79 85       	ldd	r23, Y+9	; 0x09
    18a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9f 83       	std	Y+7, r25	; 0x07
    18be:	8e 83       	std	Y+6, r24	; 0x06
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    18c2:	68 85       	ldd	r22, Y+8	; 0x08
    18c4:	79 85       	ldd	r23, Y+9	; 0x09
    18c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	6c 85       	ldd	r22, Y+12	; 0x0c
    18dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    18de:	8e 85       	ldd	r24, Y+14	; 0x0e
    18e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9f 83       	std	Y+7, r25	; 0x07
    1900:	8e 83       	std	Y+6, r24	; 0x06
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <Ultrasonic_Trigger+0x148>
    1904:	80 e9       	ldi	r24, 0x90	; 144
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	9d 83       	std	Y+5, r25	; 0x05
    190a:	8c 83       	std	Y+4, r24	; 0x04
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <Ultrasonic_Trigger+0x136>
    1914:	9d 83       	std	Y+5, r25	; 0x05
    1916:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8e 81       	ldd	r24, Y+6	; 0x06
    191a:	9f 81       	ldd	r25, Y+7	; 0x07
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9f 83       	std	Y+7, r25	; 0x07
    1920:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	9f 81       	ldd	r25, Y+7	; 0x07
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <Ultrasonic_Trigger+0x12a>
    192a:	24 c0       	rjmp	.+72     	; 0x1974 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	68 85       	ldd	r22, Y+8	; 0x08
    192e:	79 85       	ldd	r23, Y+9	; 0x09
    1930:	8a 85       	ldd	r24, Y+10	; 0x0a
    1932:	9b 85       	ldd	r25, Y+11	; 0x0b
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9f 83       	std	Y+7, r25	; 0x07
    193e:	8e 83       	std	Y+6, r24	; 0x06
    1940:	8e 81       	ldd	r24, Y+6	; 0x06
    1942:	9f 81       	ldd	r25, Y+7	; 0x07
    1944:	9b 83       	std	Y+3, r25	; 0x03
    1946:	8a 83       	std	Y+2, r24	; 0x02
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <Ultrasonic_Trigger+0x172>
    1950:	9b 83       	std	Y+3, r25	; 0x03
    1952:	8a 83       	std	Y+2, r24	; 0x02
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1956:	69 89       	ldd	r22, Y+17	; 0x11
    1958:	7a 89       	ldd	r23, Y+18	; 0x12
    195a:	8b 89       	ldd	r24, Y+19	; 0x13
    195c:	9c 89       	ldd	r25, Y+20	; 0x14
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	88 8b       	std	Y+16, r24	; 0x10
    1968:	88 89       	ldd	r24, Y+16	; 0x10
    196a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	8a 95       	dec	r24
    1970:	f1 f7       	brne	.-4      	; 0x196e <Ultrasonic_Trigger+0x194>
    1972:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	65 e0       	ldi	r22, 0x05	; 5
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <GPIO_writePin>
}
    197e:	68 96       	adiw	r28, 0x18	; 24
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <Ultrasonic_readDistance>:
 * send trigger pulse
 * measure the distance
 * return the result
 */
uint16 Ultrasonic_readDistance(void)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <Ultrasonic_readDistance+0x6>
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
	uint16 distance;
	/* send trigger pulse */
	Ultrasonic_Trigger();
    199a:	0e 94 ed 0b 	call	0x17da	; 0x17da <Ultrasonic_Trigger>
	while(g_edgeCount < 2);
    199e:	80 91 6a 00 	lds	r24, 0x006A
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	e0 f3       	brcs	.-8      	; 0x199e <Ultrasonic_readDistance+0xe>
	g_edgeCount=0;
    19a6:	10 92 6a 00 	sts	0x006A, r1
	distance  = ((g_echoEnd - g_echoStart) * TIMER_TICK_TIME_US)/ 58;
    19aa:	20 91 6d 00 	lds	r18, 0x006D
    19ae:	30 91 6e 00 	lds	r19, 0x006E
    19b2:	80 91 6b 00 	lds	r24, 0x006B
    19b6:	90 91 6c 00 	lds	r25, 0x006C
    19ba:	a9 01       	movw	r20, r18
    19bc:	48 1b       	sub	r20, r24
    19be:	59 0b       	sbc	r21, r25
    19c0:	ca 01       	movw	r24, r20
    19c2:	2a e3       	ldi	r18, 0x3A	; 58
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	b9 01       	movw	r22, r18
    19c8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__udivmodhi4>
    19cc:	cb 01       	movw	r24, r22
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 83       	std	Y+1, r24	; 0x01
	return distance;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <Ultrasonic_edgeProcessing>:
/*
 * Description :
 * record the time when detecting an edge
 */
static void Ultrasonic_edgeProcessing(void)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    19e8:	80 91 6a 00 	lds	r24, 0x006A
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	80 93 6a 00 	sts	0x006A, r24
	if(g_edgeCount == 1)
    19f2:	80 91 6a 00 	lds	r24, 0x006A
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	51 f4       	brne	.+20     	; 0x1a0e <Ultrasonic_edgeProcessing+0x2e>
	{
		/* record start time of the echo pulse */
		g_echoStart=ICU_getCapturedValue();
    19fa:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <ICU_getCapturedValue>
    19fe:	90 93 6c 00 	sts	0x006C, r25
    1a02:	80 93 6b 00 	sts	0x006B, r24
		/* set detection type to falling edge to capture the end of the echo pulse */
		ICU_selectEdgeDetectionType(FALLING_EDGE);
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	0e 94 a4 0a 	call	0x1548	; 0x1548 <ICU_selectEdgeDetectionType>
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <Ultrasonic_edgeProcessing+0x48>
	}
	else if(g_edgeCount == 2)
    1a0e:	80 91 6a 00 	lds	r24, 0x006A
    1a12:	82 30       	cpi	r24, 0x02	; 2
    1a14:	49 f4       	brne	.+18     	; 0x1a28 <Ultrasonic_edgeProcessing+0x48>
	{
		/* record end time of the echo pulse */
		g_echoEnd=ICU_getCapturedValue();
    1a16:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <ICU_getCapturedValue>
    1a1a:	90 93 6e 00 	sts	0x006E, r25
    1a1e:	80 93 6d 00 	sts	0x006D, r24
		/* return detection type to default rising edge  */
		ICU_selectEdgeDetectionType(RISING_EDGE);
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	0e 94 a4 0a 	call	0x1548	; 0x1548 <ICU_selectEdgeDetectionType>
	}
}
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <__udivmodhi4>:
    1a2e:	aa 1b       	sub	r26, r26
    1a30:	bb 1b       	sub	r27, r27
    1a32:	51 e1       	ldi	r21, 0x11	; 17
    1a34:	07 c0       	rjmp	.+14     	; 0x1a44 <__udivmodhi4_ep>

00001a36 <__udivmodhi4_loop>:
    1a36:	aa 1f       	adc	r26, r26
    1a38:	bb 1f       	adc	r27, r27
    1a3a:	a6 17       	cp	r26, r22
    1a3c:	b7 07       	cpc	r27, r23
    1a3e:	10 f0       	brcs	.+4      	; 0x1a44 <__udivmodhi4_ep>
    1a40:	a6 1b       	sub	r26, r22
    1a42:	b7 0b       	sbc	r27, r23

00001a44 <__udivmodhi4_ep>:
    1a44:	88 1f       	adc	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	5a 95       	dec	r21
    1a4a:	a9 f7       	brne	.-22     	; 0x1a36 <__udivmodhi4_loop>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	08 95       	ret

00001a56 <__udivmodsi4>:
    1a56:	a1 e2       	ldi	r26, 0x21	; 33
    1a58:	1a 2e       	mov	r1, r26
    1a5a:	aa 1b       	sub	r26, r26
    1a5c:	bb 1b       	sub	r27, r27
    1a5e:	fd 01       	movw	r30, r26
    1a60:	0d c0       	rjmp	.+26     	; 0x1a7c <__udivmodsi4_ep>

00001a62 <__udivmodsi4_loop>:
    1a62:	aa 1f       	adc	r26, r26
    1a64:	bb 1f       	adc	r27, r27
    1a66:	ee 1f       	adc	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	a2 17       	cp	r26, r18
    1a6c:	b3 07       	cpc	r27, r19
    1a6e:	e4 07       	cpc	r30, r20
    1a70:	f5 07       	cpc	r31, r21
    1a72:	20 f0       	brcs	.+8      	; 0x1a7c <__udivmodsi4_ep>
    1a74:	a2 1b       	sub	r26, r18
    1a76:	b3 0b       	sbc	r27, r19
    1a78:	e4 0b       	sbc	r30, r20
    1a7a:	f5 0b       	sbc	r31, r21

00001a7c <__udivmodsi4_ep>:
    1a7c:	66 1f       	adc	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	1a 94       	dec	r1
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <__udivmodsi4_loop>
    1a88:	60 95       	com	r22
    1a8a:	70 95       	com	r23
    1a8c:	80 95       	com	r24
    1a8e:	90 95       	com	r25
    1a90:	9b 01       	movw	r18, r22
    1a92:	ac 01       	movw	r20, r24
    1a94:	bd 01       	movw	r22, r26
    1a96:	cf 01       	movw	r24, r30
    1a98:	08 95       	ret

00001a9a <__prologue_saves__>:
    1a9a:	2f 92       	push	r2
    1a9c:	3f 92       	push	r3
    1a9e:	4f 92       	push	r4
    1aa0:	5f 92       	push	r5
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	ca 1b       	sub	r28, r26
    1ac4:	db 0b       	sbc	r29, r27
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	09 94       	ijmp

00001ad2 <__epilogue_restores__>:
    1ad2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ad4:	39 88       	ldd	r3, Y+17	; 0x11
    1ad6:	48 88       	ldd	r4, Y+16	; 0x10
    1ad8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ada:	6e 84       	ldd	r6, Y+14	; 0x0e
    1adc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ade:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ae0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ae2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ae4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ae6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ae8:	df 80       	ldd	r13, Y+7	; 0x07
    1aea:	ee 80       	ldd	r14, Y+6	; 0x06
    1aec:	fd 80       	ldd	r15, Y+5	; 0x05
    1aee:	0c 81       	ldd	r16, Y+4	; 0x04
    1af0:	1b 81       	ldd	r17, Y+3	; 0x03
    1af2:	aa 81       	ldd	r26, Y+2	; 0x02
    1af4:	b9 81       	ldd	r27, Y+1	; 0x01
    1af6:	ce 0f       	add	r28, r30
    1af8:	d1 1d       	adc	r29, r1
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	ed 01       	movw	r28, r26
    1b06:	08 95       	ret

00001b08 <_exit>:
    1b08:	f8 94       	cli

00001b0a <__stop_program>:
    1b0a:	ff cf       	rjmp	.-2      	; 0x1b0a <__stop_program>
